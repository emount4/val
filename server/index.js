const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
const path = require('path');

const app = express();
const port = 3000;

// ==================== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö POSTGRESQL ====================
const poolConfig = {
    user: 'postgres',
    host: 'localhost',
    database: 'valorant_skins',
    password: 'postgre1234', // ‚ö†Ô∏è –ü–†–û–í–ï–†–¨–¢–ï –ü–ê–†–û–õ–¨!
    port: 5432,
};

console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', { ...poolConfig, password: '***' });

const pool = new Pool(poolConfig);

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
async function testConnection() {
    try {
        const client = await pool.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        const result = await client.query('SELECT NOW() as current_time');
        console.log('‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –ë–î:', result.rows[0].current_time);
        client.release();
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', err.message);
        console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
        console.log('   1. –ó–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL —Å–µ—Ä–≤–µ—Ä');
        console.log('   2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –ø–∞—Ä–æ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
        console.log('   3. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö "valorant_skins"');
    }
}

testConnection();

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, '../')));

app.use((req, res, next) => {
    console.log(`üì® ${new Date().toISOString()} - ${req.method} ${req.url}`);
    next();
});

// ==================== API ENDPOINTS ====================

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint
app.get('/api/test', (req, res) => {
    res.json({ 
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
        status: 'OK',
        timestamp: new Date().toISOString()
    });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∫–∏–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.get('/api/skins', async (req, res) => {
    try {
        console.log('üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–∏–Ω–æ–≤...');
        const result = await pool.query('SELECT * FROM skins ORDER BY rating DESC');
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${result.rows.length} —Å–∫–∏–Ω–æ–≤ –∏–∑ –ë–î`);
        res.json(result.rows);
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–∏–Ω–æ–≤:', err.message);
        
        // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π fallback
        const fallbackData = [
            {
                id: 1,
                name: "Reaver Vandal",
                weapon: "Vandal",
                rarity: "Ultra",
                price: "2475 VP",
                rating: 8.5,
                votes: 1247,
                description: "–¢–µ–º–Ω–∞—è –≥–æ—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ –∑–≤—É–∫–∞–º–∏.",
                image_url: "https://images.unsplash.com/photo-1618335829737-3dfa5d4f1e8c?ixlib=rb-4.0.3&w=1000&q=80"
            },
            {
                id: 2,
                name: "Prime Phantom",
                weapon: "Phantom",
                rarity: "Premium",
                price: "1775 VP",
                rating: 7.8,
                votes: 982,
                description: "–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å —á–∏—Å—Ç—ã–º–∏ –ª–∏–Ω–∏—è–º–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º.",
                image_url: "https://images.unsplash.com/photo-1595599512947-92e0b69c37a1?ixlib=rb-4.0.3&w=1000&q=80"
            },
            {
                id: 3,
                name: "Oni Phantom",
                weapon: "Phantom",
                rarity: "Premium",
                price: "2175 VP",
                rating: 7.9,
                votes: 1105,
                description: "–í–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —è–ø–æ–Ω—Å–∫–æ–π –º–∏—Ñ–æ–ª–æ–≥–∏–µ–π, —ç—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ—á–µ—Ç–∞–µ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å.",
                image_url: "https://images.unsplash.com/photo-1587734195503-904fca47e0e9?ixlib=rb-4.0.3&w=1000&q=80"
            }
        ];
        
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        res.json(fallbackData);
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
app.get('/api/init-db', async (req, res) => {
    try {
        console.log('üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        await pool.query(`
            CREATE TABLE IF NOT EXISTS skins (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                weapon VARCHAR(100) NOT NULL,
                rarity VARCHAR(50) NOT NULL,
                price VARCHAR(50) NOT NULL,
                image_url TEXT,
                rating DECIMAL(3,1),
                votes INTEGER DEFAULT 0,
                description TEXT,
                release_date DATE,
                created_at TIMESTAMP DEFAULT NOW()
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ skins —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        const countResult = await pool.query('SELECT COUNT(*) FROM skins');
        const skinCount = parseInt(countResult.rows[0].count);
        
        if (skinCount === 0) {
            console.log('üìù –î–æ–±–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
            await pool.query(`
                INSERT INTO skins (name, weapon, rarity, price, rating, votes, description, image_url) VALUES 
                ('Reaver Vandal', 'Vandal', 'Ultra', '2475 VP', 8.5, 1247, '–¢–µ–º–Ω–∞—è –≥–æ—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ –∑–≤—É–∫–∞–º–∏.', 'https://images.unsplash.com/photo-1618335829737-3dfa5d4f1e8c?ixlib=rb-4.0.3&w=1000&q=80'),
                ('Prime Phantom', 'Phantom', 'Premium', '1775 VP', 7.8, 982, '–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å —á–∏—Å—Ç—ã–º–∏ –ª–∏–Ω–∏—è–º–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º.', 'https://images.unsplash.com/photo-1595599512947-92e0b69c37a1?ixlib=rb-4.0.3&w=1000&q=80'),
                ('Oni Phantom', 'Phantom', 'Premium', '2175 VP', 7.9, 1105, '–í–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —è–ø–æ–Ω—Å–∫–æ–π –º–∏—Ñ–æ–ª–æ–≥–∏–µ–π, —ç—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ—á–µ—Ç–∞–µ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å.', 'https://images.unsplash.com/photo-1587734195503-904fca47e0e9?ixlib=rb-4.0.3&w=1000&q=80'),
                ('Elderflame Vandal', 'Vandal', 'Ultra', '2475 VP', 8.2, 893, '–û–≥–Ω–µ–Ω–Ω—ã–π –¥—Ä–∞–∫–æ–Ω, –æ–∂–∏–≤–∞—é—â–∏–π –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö.', 'https://images.unsplash.com/photo-1542751371-adc38448a05e?ixlib=rb-4.0.3&w=1000&q=80'),
                ('Sentinels of Light Vandal', 'Vandal', 'Premium', '1775 VP', 7.5, 756, '–ß–∏—Å—Ç—ã–π —Å–≤–µ—Ç –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω.', 'https://images.unsplash.com/photo-1587734195503-904fca47e0e9?ixlib=rb-4.0.3&w=1000&q=80')
            `);
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        } else {
            console.log(`‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ —É–∂–µ –µ—Å—Ç—å ${skinCount} –∑–∞–ø–∏—Å–µ–π`);
        }
        
        res.json({ 
            message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 
            status: 'OK',
            skinCount: skinCount
        });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', err.message);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î',
            details: err.message 
        });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–Ω –ø–æ ID
app.get('/api/skins/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const result = await pool.query('SELECT * FROM skins WHERE id = $1', [id]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–°–∫–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(result.rows[0]);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–∏–Ω–∞:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.listen(port, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
    console.log(`üì° –¢–µ—Å—Ç–æ–≤—ã–π endpoint: http://localhost:${port}/api/test`);
    console.log(`üéÆ –°–∫–∏–Ω—ã: http://localhost:${port}/api/skins`);
    console.log(`üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î: http://localhost:${port}/api/init-db`);
    console.log(`‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!`);
        setTimeout(() => {
        console.log('üåê –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...');
        exec(`start http://localhost:${port}/index.html`);
    }, 1000);
});